import java.util.*;
import org.junit.Test;

import static org.junit.Assert.*;
import fi.helsinki.cs.tmc.edutestutils.Points;
import fi.helsinki.cs.tmc.edutestutils.timing.CpuStopwatch;
import java.util.Arrays;

@Points("5.6")
public class MainTest {
    static class Random {
        private long val;
        private long mul=16807;
        private long mod=((long)1<<31)-1;
        private long get(){
            val=(val*mul)%mod;
            return val;
        }
        public int getInt(int a, int b){
            return a+Math.abs((int)get()%(b-a+1));
        }
        public int getIntW(int a, int b, int w){
            int r=getInt(a, b);
            for (int i=1;i<=w;i++){
                r=Math.max(r, getInt(a, b));
            }
            for (int i=-1;i>=w;i--){
                r=Math.min(r, getInt(a, b));
            }
            return r;
        }
        public Random(int seed){
            val=seed;
        }
    }
    
    String rDNA(int n, int seed){
        StringBuilder b=new StringBuilder();
        Random r=new Random(seed);
        
        for(int i=0; i<n; i++){
            int asd=r.getInt(1, 4);
            if(asd==1) b.append('A');
            if(asd==2) b.append('C');
            if(asd==3) b.append('G');
            if(asd==4) b.append('T');
        }
        return b.toString();
    }
    
    public void pieniTesti(String a, String b, boolean tulos) {
        boolean ulos=Main.onkoOsajono(a, b);
        if(tulos==true)
            assertTrue("Merkkijono '"+a+"' on merkkijonon '"+b+"' osajono, mutta metodisi palauttaa 'false'.", ulos == tulos);
        else
            assertTrue("Merkkijono '"+a+"' ei ole merkkijonon '"+b+"' osajono, mutta metodisi palauttaa 'true'.", ulos == tulos);
    }

    public void suuriTesti(String a, String b, boolean tulos) {
        CpuStopwatch kello=new CpuStopwatch(CpuStopwatch.Mode.USER);
        boolean ulos=Main.onkoOsajono(a, b);
        assertTrue("Metodisi toimii väärin suurella syötteellä. Se palauttaa '"+ulos+"' kun pitäisi palauttaa '"+tulos+"'.", ulos == tulos);
        double aika=kello.getElapsedTime();
        assertTrue("Metodisi kuluttaa liikaa aikaa: "+kello+"s, kun aikaraja on 1s.",
                   aika<=1);
    }
    
    @Test(timeout=1000)
    public void esimerkit() {
        pieniTesti("AB", "ACACACAB", true);
        pieniTesti("AA", "ABBA", false);
        pieniTesti("AAAA", "AAAA", true);
        pieniTesti("ABABAC", "ABABABAB", false);
    }
    
    @Test(timeout=1000)
    public void pienet1() {
        pieniTesti("A", "BBBBBBB", false);
        pieniTesti("BBBB", "AABABBBABABABABBBBA", true);
        pieniTesti("DEF", "ABCDEFG", true);
        pieniTesti("LOL", "EI", false);
        pieniTesti("ABABABABABABABABABAC", "ABABABABABABABABABABABABABABABABABABABAB", false);
        pieniTesti("OUR", "SOURCE", true);
        pieniTesti("K", "KOULU", true);
        pieniTesti("OULU", "KOULU", true);
        pieniTesti("ASJHRA", "ASDAUIHASDASD", false);
        pieniTesti("AC", "ABCDEFGHIJKLMN", false);
        pieniTesti("HIJ", "ABCDEFGHIJKLMN", true);
        pieniTesti("JK", "ABCDEFGHIJKLMN", true);
        pieniTesti("HIFK", "ABCDEFGHIJKLMN", false);
        pieniTesti("ONNN", "ONONNONNN", true);
        pieniTesti("ONNN", "ONNNONNON", true);
        pieniTesti("AAAAAAAAAA", "AAAAAAAAAB", false);
        pieniTesti("AAAAAAAAAA", "BAAAAAAAAA", false);
        pieniTesti("AAAAAAAAAA", "AAAABAAAAA", false);
    }
    
    @Test(timeout=1000)
    public void pienet2() {
        pieniTesti("CGGT", rDNA(10, 1237187931), true);
        pieniTesti("TAAA", rDNA(15, 1234121341), true);
        pieniTesti("TTTTTG", rDNA(15, 712781723), true);
        pieniTesti("AGTTT", rDNA(15, 918289731), false);
        pieniTesti("AAAAA", rDNA(15, 883718921), false);
        pieniTesti("AAAAA", rDNA(15, 981028312), false);
    }
    
    @Test(timeout=5000)
    public void suuri1() {
        StringBuilder a=new StringBuilder();
        StringBuilder b=new StringBuilder();
        
        int n=200000, m=100000;
        
        for(int i=0; i<n; i++)
            if(i%2==0)
                b.append('A');
            else
                b.append('B');
        
        for(int i=0; i<m-1; i++)
            if(i%2==0)
                a.append('A');
            else
                a.append('B');
        
        a.append('C');
        suuriTesti(a.toString(), b.toString(), false);
    }
    
    @Test(timeout=5000)
    public void suuri2() {
        StringBuilder a=new StringBuilder();
        StringBuilder b=new StringBuilder();
        
        int n=200000, m=100000;
        
        for(int i=0; i<n; i++)
            if(i==125000)
                b.append('A');
            else
                b.append('B');
        
        for(int i=0; i<m-1; i++)
            if(i==42127)
                a.append('A');
            else
                a.append('B');
        
        suuriTesti(a.toString(), b.toString(), true);
    }
    
    @Test(timeout=5000)
    public void suuri3() {
        StringBuilder a=new StringBuilder();
        StringBuilder b=new StringBuilder();
        
        int n=200000, m=100000;
        
        for(int i=0; i<n; i++)
            if(i==125000)
                b.append('A');
            else
                b.append('B');
        
        for(int i=0; i<m-1; i++)
            if(i==42127)
                a.append('A');
            else
                a.append('B');
        
        suuriTesti(a.toString(), b.toString(), true);
    }
    
    @Test(timeout=5000)
    public void suuri4() {
        StringBuilder a=new StringBuilder();
        StringBuilder b=new StringBuilder();
        
        int n=200000, m=100000;
        
        for(int i=0; i<10000; i++)
            if(i==6666)
                b.append("ABCABDACDAAA");
            else
                b.append("ABCABDACDACS");
        
        a.append("ABCABDACDAAA");
        for(int i=0; i<3000; i++)
            a.append("ABCABDACDACS");
        
        suuriTesti(a.toString(), b.toString(), true);
    }
    
    @Test(timeout=5000)
    public void suuri5() {
        String a = rDNA(10, 412341241);
        String b= rDNA(200000, 1283192836);
        
        suuriTesti(a, b, true);
    }
    
    
    @Test(timeout=5000)
    public void suuri6() {
        String a = "AAAAAAAA";
        String b= rDNA(200000, 172398471);
        
        suuriTesti(a, b, true);
    }
    
    @Test(timeout=5000)
    public void suuri7() {
        String a = "AAAAAAAAA";
        String b= rDNA(200000, 172398471);
        
        suuriTesti(a, b, false);
    }
    
    @Test(timeout=5000)
    public void suuri8() {
        String a = "TTGGCAGCATGGTCAGTTATAGGAATCTATTAGGTCGAGGCCAATATGTCTGGCGGGTAATAGAATTCATAACGGACAGTTAAGTGCGATTTGACGACCGCCCGTCGCTGAAAAAGTTCGCCAGTTCATTAGGTTACAATTACCGCCTTCGGTGACGAAAGTTCCGTCCAGAGAACCGACCTTGTCCTACAAATGGGAAGCTACAGGTGCGGTTTGACACGCGGCAAAGTTGACCGCGCTGCAATGACTAGCGCCTTTGCAACCGGACGGCTATCGAGCGCATAGCCGCATCATCCTTGAACAAGGGCAATGCTAAAATTAGTTCCATACGATGGCGAATTAAGCATTGGTGCTCCTTGGTCTTGCATCTAACCTCGTCTTAACCCTGAGAGTCGAAAATACCAAATAAATTCGGGCGGGGCTCCCATCGTAAACTGCTATAGTAACTTTGCTCTTGGGCACAGAAATTTGACGCTACGTATCGTCGGCGGGGCACTCAATGCTCAATCGGCGACCAAGGAGCAGAGCCTCTCGGACATGTAGTTCGTAAAGTATGTAACCTTCTACTGCAAGCACGTTAGACGAGAGTGAAAATGGACTTCACTCCAGGGTTCAACGACGACCGGAATGAATACTTTACCCCCGAAGGTTGCGCCTTTCACAAGAGCCAGGTGGGTCCCTTACCTAGCTACATCTGGCGACTTGCAAAGCCAAGGTGATACACTACACTAAAGGTACACGAACCGTGGACGGGGCCACCGGCACCCCACGAGAGCGTACACAACGATGGATCGAGGGGCGGTAAATGAGCCATGGGTCACGCCAAGGCCAGAAGTACTAGTATTTAGATAACTATTTAAAAATTAGCATAACGGCCCTGCCCCTATTTCATGCCTTCAGTCGTGAAGACCTTCGGGATTAACCATCGCGCCCCAGACCCACCGTACGTATGATCTTCTTGTTTGCGTGCCCAAACCACGGACTCAACGAGGCACCACGAACACCCTTCGCTGCGCAACAGAGGTGATTTCACGCGCCGCCTGTTTCGTGATACAACAAATTATAACGAGTTTGTGAAACTTAAACATTCCTCTTCCGTGAGGACGCTGGTGGATCAATGACCGCCAAGCTACATCCAATCCATATTCTTACCGCATACCAACTGACATTTGCATTAATCCTTCTAATAGTGCACGGACAGGAAGGAAGCAGACAAGAGGGTTAGAAGTTCGGACCACGATGTAGCAACAACTGGCGAAGTAGGAGGGGCGGTCGATCCAGGGTGGACACGCGGCGATCATAAACCTCGCCGGATGCGGGGTTGTATTGGAATTAAAACCCCGAATGGGTAATTGTTCATCAAAGTCGAGCGCACGGATTCATAATAACATCATCCCAGTGAACGGACTCGAGCAAGCCTTATCCGGATTACTCCACGTAAACGAACACTTTGACTTATGACCAAGCGTTTGGGGCTTCAGTACCGCCCTCAGGAATTGTTTTGCTGTGACCCAATTACTTATTGATCATGCTGTTGCCAACCGAGAGTAGACCCTGTGTCACCTTTCTCAGCAGCACCATCCCATTAGGACCCCCAAGCCGAAACCTGCCTTGGCTCATCACAATGATGTGTGAAGTTGTTGTGCGTGCTACGAACGGACGCGGTATCTCCAGTATCGACTGCTAGGCATCATAAAGCGGCTCTAACCGATCTATACCACAATTACTTCCAAGATGGCCGGCGATCATGCCGAGGCGCAAGGTTCGCCATCCGCGGATATAAGTCTGTGTTAGATGGCAGCTATAGGACGAGGCTTTACAACGTTTGGAGATCCGATGATTTAGAGGAATTGCGAGGAACCGCAGAATCAACGGGTGAGTCTGGGCTATGGTCCGTGCGGGCCACGTGGCAGCTCGGACGTGTGTTCATGAAGTGGTAGCTTCCGGTTACAGAAGCCTCTGTGTAGTCAGGACCTAATTCAATGCAACAAGAGTACACTCTCCCAGGCAAATGAGCCGATCCAACGCGTCAACTATAAAAAAGTCCGCCACGAATGCAGCCTTGGCATCAGCCGTAATCAGGTACTAGGAACTTAATTATATCACCGTCCCCCGGTGTCTTATAACGACGCCCACTCATAAATTGAACTGGACTGTAATGCAAAAACACGGATTTGTGAAGGCATTGGCGGTAGGCTTAGCGTGCAATTTATCGGCCGTGTATGTTTCGTGCATGAATAACTAAGCGTACCGAATGTATGATTCATCTACCGAACCTGGCGTATTCACGGGTCGCATCCGAATGCCTCGACAACGCCCGCGAGCGAAGGCCATTCGCGTCGTCATTGTATATAGAGCCTCAATCCACGGGGTCTGTAAGACTGAGAACGTGGTTGCGTTCATGCCCACATAGGGTCTCGCCTATCCATTATTACCGGATGGCAACCTAGGAGGCCCACTAAGCAGACAAGCACCTCGTCAGCAACGAATCTACCCCAAAACACTTTACTTGCTATTGGTAGTCGGGGACCAATCGTTCAGTGTTGCCAAGAGCCCTACAAATCGAAAACTCATTAGGAAATTATCGTAAATGACTCTACGATAGGAAAGAATGGGCCCGGGTTAACAACTGTATAGCACGGGATCTTGCTGGCGATTAGTACGTATCCCCGGGATTATGCGTATATCCTCATAGCCAGGCCAAGATTGCGCCTTATAGTCAATGCATGTTCCGGCAGGACCAGCGTCATGTCTTTTGCTGCCGTCCGTCCGACGTCCCCGATAGAAAATAGCTACCGTTCGGTGCTCTCCCACTGTAGACGACTAAGCAACTGTCTACACGTTGAAACGCCGTCGAACTACCACTCGGATAAGTCGCTCAGCGGCTGATATCACGCCAGCACGTCCAACCCCCAGTCCCCGGGCGTAGTCTTTAGGCGTGCCAGGCACAAGAAACCGTACGACGCCGACCACGCTTTTCTCACGGCTAGTAGAGGCAACGACACAGCCACCAGACGCGAGTGTAACGGAGATTCCCTCAGTATTAGAGAAAAGGCACGCAGCCTGTTCCTTCTGCGCACACAGCTCTAATGCCCCGCCTTTTGCACCAGCGCGCAGCTCTGCCTCGATTGTATCATGTGAGCAGGGTGAAACTCCCCTATAAGGATCACCGTGAGTTTGAAGTCAACTCATGTCCTAGTGTATGGTTGAGATTTTGCTCTAAAGCTCCATTTTGGGTAGACTTTAACGCAGTATGTCAATACCGGTCTACGCAGTCATTTTACCCACAACCTATGCAGCGGTCACGGCGCCGGGCCTTTCCTATTCAGAAACTTGTTCAGACAAGTCGCGACTTGGCCGCGTCATCGCGCCCCGTAAATTTCACGTTTTCCGGCCAGTCGCCCAGAGGACCAGTGAGCGTACCATTACCTGAACTTGGATTCATGACCCCGATGCGGAGGCAAGCCGAGCACGTCGACAGAATATTCCAACCTCCCGCCCTAGGCACTGCTGTAGGGAAGTCAAGGGCGCTCCGAAGGTACTCTCCAGGGCGTTTTATTAGCAGACCGAATCGGCCAGTACTGTTTATCGGGAATGTACCAGTGTAGAAGGGACTGGATATCACTAGAACGGTGTGTGACATGCATGCAGAATCAACATCTTAGGCTTTATCCGACACCACACTTTTTCTATTGTAGAGGGTTTGCTATAGGAAGTCCGGCCGGTACGCGTACGGGTTTTGTTTTGTGCAACCGCATACGGGTTGGGTTCCAATGGTGTGTTCTCCGTTTGCCCGAAACGGTGAAGGTTGGAAGAAAGCGCCATCTTTAAACCATAATTTTCCCATTCGCTCTATAGTTATCAAGGAATTATTATACATCGATCTACCTCTGAAATGTCGTACGAAACACTGTGTCTCCCACGCAAAGTCACCTCAAAACTTTCTGGACTACTGGATACCAGATCGTGGCTACCACACCGGGTTGTCATATAGAGGCTTTTGCAAGCTCGCCTTCGTGTGCTCGGAGCCGTAGCACGGAGATTAATTAAGGAAGCAAGCGTACG";
        String b= rDNA(200000, 81287391);
        
        suuriTesti(a, b, true);
    }
    
    @Test(timeout=5000)
    public void suuri9() {
        String a = "TTGGCAGCATGGTCAGTTATAGGAATCTATTAGGTCGAGGCCAATATGTCTGGCGGGTAATAGAATTCATAACGGACAGTTAAGTGCGATTTGACGACCGCCCGTCGCTGAAAAAGTTCGCCAGTTCATTAGGTTACAATTACCGCCTTCGGTGACGAAAGTTCCGTCCAGAGAACCGACCTTGTCCTACAAATGGGAAGCTACAGGTGCGGTTTGACACGCGGCAAAGTTGACCGCGCTGCAATGACTAGCGCCTTTGCAACCGGACGGCTATCGAGCGCATAGCCGCATCATCCTTGAACAAGGGCAATGCTAAAATTAGTTCCATACGATGGCGAATTAAGCATTGGTGCTCCTTGGTCTTGCATCTAACCTCGTCTTAACCCTGAGAGTCGAAAATACCAAATAAATTCGGGCGGGGCTCCCATCGTAAACTGCTATAGTAACTTTGCTCTTGGGCACAGAAATTTGACGCTACGTATCGTCGGCGGGGCACTCAATGCTCAATCGGCGACCAAGGAGCAGAGCCTCTCGGACATGTAGTTCGTAAAGTATGTAACCTTCTACTGCAAGCACGTTAGACGAGAGTGAAAATGGACTTCACTCCAGGGTTCAACGACGACCGGAATGAATACTTTACCCCCGAAGGTTGCGCCTTTCACAAGAGCCAGGTGGGTCCCTTACCTAGCTACATCTGGCGACTTGCAAAGCCAAGGTGATACACTACACTAAAGGTACACGAACCGTGGACGGGGCCACCGGCACCCCACGAGAGCGTACACAACGATGGATCGAGGGGCGGTAAATGAGCCATGGGTCACGCCAAGGCCAGAAGTACTAGTATTTAGATAACTATTTAAAAATTAGCATAACGGCCCTGCCCCTATTTCATGCCTTCAGTCGTGAAGACCTTCGGGATTAACCATCGCGCCCCAGACCCACCGTACGTATGATCTTCTTGTTTGCGTGCCCAAACCACGGACTCAACGAGGCACCACGAACACCCTTCGCTGCGCAACAGAGGTGATTTCACGCGCCGCCTGTTTCGTGATACAACAAATTATAACGAGTTTGTGAAACTTAAACATTCCTCTTCCGTGAGGACGCTGGTGGATCAATGACCGCCAAGCTACATCCAATCCATATTCTTACCGCATACCAACTGACATTTGCATTAATCCTTCTAATAGTGCACGGACAGGAAGGAAGCAGACAAGAGGGTTAGAAGTTCGGACCACGATGTAGCAACAACTGGCGAAGTAGGAGGGGCGGTCGATCCAGGGTGGACACGCGGCGATCATAAACCTCGCCGGATGCGGGGTTGTATTGGAATTAAAACCCCGAATGGGTAATTGTTCATCAAAGTCGAGCGCACGGATTCATAATAACATCATCCCAGTGAACGGACTCGAGCAAGCCTTATCCGGATTACTCCACGTAAACGAACACTTTGACTTATGACCAAGCGTTTGGGGCTTCAGTACCGCCCTCAGGAATTGTTTTGCTGTGACCCAATTACTTATTGATCATGCTGTTGCCAACCGAGAGTAGACCCTGTGTCACCTTTCTCAGCAGCACCATCCCATTAGGACCCCCAAGCCGAAACCTGCCTTGGCTCATCACAATGATGTGTGAAGTTGTTGTGCGTGCTACGAACGGACGCGGTATCTCCAGTATCGACTGCTAGGCATCATAAAGCGGCTCTAACCGATCTATACCACAATTACTTCCAAGATGGCCGGCGATCATGCCGAGGCGCAAGGTTCGCCATCCGCGGATATAAGTCTGTGTTAGATGGCAGCTATAGGACGAGGCTTTACAACGTTTGGAGATCCGATGATTTAGAGGAATTGCGAGGAACCGCAGAATCAACGGGTGAGTCTGGGCTATGGTCCGTGCGGGCCACGTGGCAGCTCGGACGTGTGTTCATGAAGTGGTAGCTTCCGGTTACAGAAGCCTCTGTGTAGTCAGGACCTAATTCAATGCAACAAGAGTACACTCTCCCAGGCAAATGAGCCGATCCAACGCGTCAACTATAAAAAAGTCCGCCACGAATGCAGCCTTGGCATCAGCCGTAATCAGGTACTAGGAACTTAATTATATCACCGTCCCCCGGTGTCTTATAACGACGCCCACTCATAAATTGAACTGGACTGTAATGCAAAAACACGGATTTGTGAAGGCATTGGCGGTAGGCTTAGCGTGCAATTTATCGGCCGTGTATGTTTCGTGCATGAATAACTAAGCGTACCGAATGTATGATTCATCTACCGAACCTGGCGTATTCACGGGTCGCATCCGAATGCCTCGACAACGCCCGCGAGCGAAGGCCATTCGCGTCGTCATTGTATATAGAGCCTCAATCCACGGGGTCTGTAAGACTGAGAACGTGGTTGCGTTCATGCCCACATAGGGTCTCGCCTATCCATTATTACCGGATGGCAACCTAGGAGGCCCACTAAGCAGACAAGCACCTCGTCAGCAACGAATCTACCCCAAAACACTTTACTTGCTATTGGTAGTCGGGGACCAATCGTTCAGTGTTGCCAAGAGCCCTACAAATCGAAAACTCATTAGGAAATTATCGTAAATGACTCTACGATAGGAAAGAATGGGCCCGGGTTAACAACTGTATAGCACGGGATCTTGCTGGCGATTAGTACGTATCCCCGGGATTATGCGTATATCCTCATAGCCAGGCCAAGATTGCGCCTTATAGTCAATGCATGTTCCGGCAGGACCAGCGTCATGTCTTTTGCTGCCGTCCGTCCGACGTCCCCGATAGAAAATAGCTACCGTTCGGTGCTCTCCCACTGTAGACGACTAAGCAACTGTCTACACGTTGAAACGCCGTCGAACTACCACTCGGATAAGTCGCTCAGCGGCTGATATCACGCCAGCACGTCCAACCCCCAGTCCCCGGGCGTAGTCTTTAGGCGTGCCAGGCACAAGAAACCGTACGACGCCGACCACGCTTTTCTCACGGCTAGTAGAGGCAACGACACAGCCACCAGACGCGAGTGTAACGGAGATTCCCTCAGTATTAGAGAAAAGGCACGCAGCCTGTTCCTTCTGCGCACACAGCTCTAATGCCCCGCCTTTTGCACCAGCGCGCAGCTCTGCCTCGATTGTATCATGTGAGCAGGGTGAAACTCCCCTATAAGGATCACCGTGAGTTTGAAGTCAACTCATGTCCTAGTGTATGGTTGAGATTTTGCTCTAACGCTCCATTTTGGGTAGACTTTAACGCAGTATGTCAATACCGGTCTACGCAGTCATTTTACCCACAACCTATGCAGCGGTCACGGCGCCGGGCCTTTCCTATTCAGAAACTTGTTCAGACAAGTCGCGACTTGGCCGCGTCATCGCGCCCCGTAAATTTCACGTTTTCCGGCCAGTCGCCCAGAGGACCAGTGAGCGTACCATTACCTGAACTTGGATTCATGACCCCGATGCGGAGGCAAGCCGAGCACGTCGACAGAATATTCCAACCTCCCGCCCTAGGCACTGCTGTAGGGAAGTCAAGGGCGCTCCGAAGGTACTCTCCAGGGCGTTTTATTAGCAGACCGAATCGGCCAGTACTGTTTATCGGGAATGTACCAGTGTAGAAGGGACTGGATATCACTAGAACGGTGTGTGACATGCATGCAGAATCAACATCTTAGGCTTTATCCGACACCACACTTTTTCTATTGTAGAGGGTTTGCTATAGGAAGTCCGGCCGGTACGCGTACGGGTTTTGTTTTGTGCAACCGCATACGGGTTGGGTTCCAATGGTGTGTTCTCCGTTTGCCCGAAACGGTGAAGGTTGGAAGAAAGCGCCATCTTTAAACCATAATTTTCCCATTCGCTCTATAGTTATCAAGGAATTATTATACATCGATCTACCTCTGAAATGTCGTACGAAACACTGTGTCTCCCACGCAAAGTCACCTCAAAACTTTCTGGACTACTGGATACCAGATCGTGGCTACCACACCGGGTTGTCATATAGAGGCTTTTGCAAGCTCGCCTTCGTGTGCTCGGAGCCGTAGCACGGAGATTAATTAAGGAAGCAAGCGTACG";
        String b= rDNA(200000, 81287391);
        
        suuriTesti(a, b, false);
    }
    
    int lol(int asd){
        int ret=0;
        for(int i=0; i<30; i++)
            if(((1<<i) & asd) != 0)
                ret++;
        return ret;
    }
    
    @Test(timeout=5000)
    public void varoitinKayttamastaModuloaKakkosenpotenssiTeeOOliOO() {
        StringBuilder a=new StringBuilder();
        StringBuilder b=new StringBuilder();
        
        for(int i=0; i<(1<<14); i++){
            if(lol(i)%2==0){
                a.append("A");
                b.append("B");
            }else{
                a.append("B");
                b.append("A");
            }
        }
        
        suuriTesti(a.toString(), b.toString(), false);
        
        StringBuilder a2=new StringBuilder();
        StringBuilder b2=new StringBuilder();
        a2.append("B");
        b2.append("A");
        for(int i=0; i<1000; i++){
            a2.append("A");
            b2.append("A");
        } 
        suuriTesti(a2.toString(), b2.toString(), false);
    }
}


